------------------------
-- Tablas de usuarios --
------------------------
CREATE TABLE usuarios(
    id_usuario INT NOT NULL,
    nombre VARCHAR(255),
    mail VARCHAR(255),
    contrasena VARCHAR(255),
    username VARCHAR (255),
    fecha_nacimiento DATE,

    CONSTRAINT usuarios_pk PRIMARY KEY (id_usuario),
    CONSTRAINT hasat CHECK (mail LIKE '%@%')
);

--------------------------
-- Tablas de multimedia --
--------------------------
CREATE TABLE peliculas(
    id_pelicula SERIAL NOT NULL,
    titulo VARCHAR(255),
    duracion INT,
    clasificacion VARCHAR(255),
    puntacion FLOAT,
    anho INT,

    CONSTRAINT peliculas_pk PRIMARY KEY (id_pelicula)
);

CREATE TABLE series(
    id_serie SERIAL NOT NULL,
    titulo VARCHAR(255),
    clasificacion VARCHAR(255),
    puntuacion FLOAT,
    anho INT,

    CONSTRAINT series_pk PRIMARY KEY (id_serie)
);

CREATE TABLE capitulos(
    id_capitulo SERIAL NOT NULL,
    id_serie INT,
    titulo VARCHAR(255),
    duracion INT,
    numero INT,

    CONSTRAINT capitulos_pk PRIMARY KEY (id_capitulo),
    CONSTRAINT id_serie_fk FOREIGN KEY (id_serie) REFERENCES series(id_serie) ON DELETE CASCADE
);

---------------------------
-- Tablas de videojuegos --
---------------------------
CREATE TABLE videojuegos(
    id_juego SERIAL NOT NULL,
    CONSTRAINT videojuegos_pk PRIMARY KEY (id_juego)
);


CREATE TABLE videojuegos_pun (
  id_juego INT,
  titulo VARCHAR(255),
  puntuacion FLOAT,
  clasificacion VARCHAR(10),
  fecha_lanzamiento DATE,
  beneficio VARCHAR(255),
  
  PRIMARY KEY (id_juego),
  FOREIGN KEY(id_juego) REFERENCES videojuegos(id_juego) ON DELETE CASCADE,
  CHECK (puntuacion BETWEEN 0 AND 100)
);


CREATE TABLE videojuegos_sub (
  id_juego INT,
  titulo VARCHAR(255),
  puntuacion FLOAT,
  clasificacion VARCHAR(10),
  fecha_lanzamiento DATE,
  mensualidad INT,

  PRIMARY KEY (id_juego),
  FOREIGN KEY(id_juego) REFERENCES videojuegos(id_juego) ON DELETE CASCADE,
  CHECK (puntuacion BETWEEN 0 AND 100),
  CHECK (mensualidad > 0)
);


CREATE TABLE videojuegos_usuario(
    id_usuario INT,
    id_juego INT,
    horas_juego FLOAT,
    fecha_visualizacion DATE,

    CONSTRAINT videojuegos_usuario_pk PRIMARY KEY (id_usuario, id_juego, fecha_visualizacion),
    CONSTRAINT id_usuario_fk FOREIGN KEY(id_usuario) REFERENCES usuarios(id_usuario) ON DELETE CASCADE,
    CONSTRAINT id_juego_fk FOREIGN KEY(id_juego) REFERENCES videojuegos(id_juego),
    CONSTRAINT horas_juego_geq0 CHECK (horas_juego >= 0)
);

CREATE TABLE resenas(
    id_res SERIAL NOT NULL,
    veredicto CHAR(8),
    titulo VARCHAR(255),
    texto TEXT,
    id_usuario INT,
    id_juego INT,

    CONSTRAINT resenas_pk PRIMARY KEY (id_res),
    CONSTRAINT id_usuario_fk FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario) ON DELETE CASCADE,
    CONSTRAINT id_juego_fk FOREIGN KEY (id_juego) REFERENCES videojuegos(id_juego) ON DELETE CASCADE
);

---------------------------
-- Tablas de Proveedores --
---------------------------
CREATE TABLE proveedores_ps(
    id_prov SERIAL NOT NULL,
    nombre VARCHAR(255),
    costo INT,

    CONSTRAINT proveedores_ps_pk PRIMARY KEY (id_prov)
);

CREATE TABLE proveedores_juego(
    id_prov SERIAL NOT NULL,
    nombre VARCHAR(255),
    plataforma VARCHAR(255),

    CONSTRAINT proveedores_juegos_pk PRIMARY KEY (id_prov)
);


CREATE TABLE usuarios_proveedor_j (
    id_usuario INT NOT NULL,
    id_prov SERIAL NOT NULL,
    
    PRIMARY KEY (id_usuario, id_prov),
    FOREIGN KEY(id_usuario) REFERENCES usuarios(id_usuario) ON DELETE CASCADE,
    FOREIGN KEY(id_prov) REFERENCES proveedores_juego(id_prov) ON DELETE CASCADE
);


CREATE TABLE catalogo_j(
    id_juego INT NOT NULL,
    id_prov INT NOT NULL,
    precio INT NOT NULL,
    precio_preorden INT,

    PRIMARY KEY (id_juego, id_prov),
    FOREIGN KEY(id_juego) REFERENCES videojuegos(id_juego) ON DELETE CASCADE,
    FOREIGN KEY(id_prov) REFERENCES proveedores_juego(id_prov) ON DELETE CASCADE
);

--- OJO CON LOS PRECIOS NEGATIVOS ^


CREATE TABLE catalogo_p_incluida(
    id_pelicula INT NOT NULL,
    id_prov INT NOT NULL,

    CONSTRAINT catalogo_p_incluida_pk PRIMARY KEY (id_pelicula, id_prov),
    CONSTRAINT id_pelicula_fk FOREIGN KEY (id_pelicula) REFERENCES peliculas(id_pelicula) ON DELETE CASCADE,
    CONSTRAINT id_prov_fk FOREIGN KEY (id_prov) REFERENCES proveedores_ps(id_prov) ON DELETE CASCADE
);

CREATE TABLE catalogo_p_arriendo(
    id_pelicula INT NOT NULL,
    id_prov INT NOT NULL,
    precio INT,
    disponibilidad INT,

    CONSTRAINT catalogo_p_arriendo_pk PRIMARY KEY (id_pelicula, id_prov),    
    FOREIGN KEY (id_pelicula) REFERENCES peliculas(id_pelicula) ON DELETE CASCADE,
    FOREIGN KEY (id_prov) REFERENCES proveedores_ps(id_prov) ON DELETE CASCADE
);

CREATE TABLE catalogo_s(
    id_serie INT NOT NULL,
    id_prov INT NOT NULL,

    CONSTRAINT catalogo_s_pk PRIMARY KEY (id_serie, id_prov),
    CONSTRAINT id_serie_fk FOREIGN KEY (id_serie) REFERENCES series(id_serie) ON DELETE CASCADE,
    CONSTRAINT id_prov_fk FOREIGN KEY (id_prov) REFERENCES proveedores_ps(id_prov) ON DELETE CASCADE
);

---------------------
-- Tablas de Pagos --
---------------------
CREATE TABLE pagos(
    id_pago SERIAL NOT NULL,
    id_usuario INT,
    monto INT,
    fecha DATE,

    PRIMARY KEY (id_pago),
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario) ON DELETE CASCADE,
    CHECK (monto > 0)
);

CREATE TABLE pagos_p(
    id_pago INT,
    id_prov INT,
    id_pelicula INT,

    PRIMARY KEY (id_pago),
    FOREIGN KEY (id_pago) REFERENCES pagos(id_pago) ON DELETE CASCADE,
    FOREIGN KEY (id_prov) REFERENCES proveedores_ps(id_prov) ON DELETE CASCADE,
    FOREIGN KEY (id_pelicula) REFERENCES peliculas(id_pelicula) ON DELETE CASCADE
);

CREATE TABLE pagos_sub_ps(
    id_pago INT,
    id_sub INT,

    PRIMARY KEY (id_pago),
    FOREIGN KEY (id_pago) REFERENCES pagos(id_pago) ON DELETE CASCADE,
    FOREIGN KEY (id_sub) REFERENCES subscripciones_ps(id_sub) ON DELETE CASCADE
);

CREATE TABLE pagos_sub_j(
    id_pago INT,
    id_sub INT,

    PRIMARY KEY (id_pago),
    FOREIGN KEY (id_pago) REFERENCES pagos(id_pago) ON DELETE CASCADE,
    FOREIGN KEY (id_sub) REFERENCES subscripciones_juego(id_sub) ON DELETE CASCADE
);

CREATE TABLE pagos_pun(
    id_pago INT,
    id_prov INT,
    preorden BOOLEAN,
    id_juego INT,

    PRIMARY KEY (id_pago),
    FOREIGN KEY (id_pago) REFERENCES pagos(id_pago) ON DELETE CASCADE,
    FOREIGN KEY (id_prov) REFERENCES proveedores_juego(id_prov) ON DELETE CASCADE,
    FOREIGN KEY (id_juego) REFERENCES videojuegos(id_juego) ON DELETE CASCADE
);

------------------------------
-- Tablas de Subscripciones --
------------------------------
CREATE TABLE subscripciones_ps(
    id_sub SERIAL NOT NULL,
    id_usuario INT,
    id_prov INT,
    estado VARCHAR(255),
    fecha_inicio DATE,

    PRIMARY KEY (id_sub),
    FOREIGN KEY (id_prov) REFERENCES proveedores_ps(id_prov) ON DELETE CASCADE,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario) ON DELETE CASCADE
);

CREATE TABLE subscripciones_ps_terminadas(
    id_sub INT,
    fecha_termino DATE,

    FOREIGN KEY (id_sub) REFERENCES subscripciones_ps(id_sub) ON DELETE CASCADE
);

CREATE TABLE subscripciones_juego(
    id_sub SERIAL NOT NULL,
    estado VARCHAR(255),
    fecha_inicio DATE,
    id_usuario VARCHAR(255),
    fecha_termino DATE,
    id_juego INT,

    PRIMARY KEY (id_sub),
    FOREIGN KEY (id_juego) REFERENCES videojuegos(id_juego) ON DELETE CASCADE
);


-------------------------------
-- Tablas de Visualizaciones --
-------------------------------
CREATE TABLE visualizacion_p(
    id_usuario INT NOT NULL,
    id_pelicula INT NOT NULL,
    fecha DATE,

    FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario) ON DELETE CASCADE,
    FOREIGN KEY (id_pelicula) REFERENCES peliculas(id_pelicula)
);


CREATE TABLE visualizacion_c(
    id_usuario INT NOT NULL,
    id_capitulo INT NOT NULL,
    fecha DATE,

    FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario) ON DELETE CASCADE,
    FOREIGN KEY (id_capitulo) REFERENCES capitulos(id_capitulo)
);

----------------------
-- Tablas de Genero --
-----------------------
CREATE TABLE generos(
    genero VARCHAR(255) NOT NULL,
    PRIMARY KEY (genero)
);


CREATE TABLE genero_subgenero(
    genero VARCHAR(255) NOT NULL,
    subgenero VARCHAR(255) NOT NULL,

    FOREIGN KEY (genero) REFERENCES generos(genero) ON DELETE CASCADE,
    FOREIGN KEY (subgenero) REFERENCES generos(genero) ON DELETE CASCADE
);


CREATE TABLE generos_p(
    id_pelicula INT NOT NULL,
    genero VARCHAR(255) NOT NULL,
    FOREIGN KEY (id_pelicula) REFERENCES peliculas(id_pelicula) ON DELETE CASCADE,
    FOREIGN KEY (genero) REFERENCES generos(genero) ON DELETE CASCADE
);


CREATE TABLE generos_s(
    id_serie INT NOT NULL,
    genero VARCHAR(255) NOT NULL,
    FOREIGN KEY (id_serie) REFERENCES series(id_serie) ON DELETE CASCADE,
    FOREIGN KEY (genero) REFERENCES generos(genero) ON DELETE CASCADE
);


CREATE TABLE generos_juego(
    id_juego INT NOT NULL,
    genero VARCHAR(255) NOT NULL,
    FOREIGN KEY (id_juego) REFERENCES videojuegos(id_juego) ON DELETE CASCADE,
    FOREIGN KEY (genero) REFERENCES generos(genero) ON DELETE CASCADE
);
